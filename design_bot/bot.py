from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import logging
logging.basicConfig(level=logging.INFO)

# === –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –ó–î–ï–°–¨ ===
BOT_TOKEN = "8026285248:AAF1oGQQGSsi0AAGzaBWs0tohSWpALUz27U"  # ‚Üê –ó–ê–ú–ï–ù–ò –≠–¢–£ –°–¢–†–û–ö–£ –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class DesignQuiz(StatesGroup):
    goal = State()
    experience = State()
    platform = State()
    budget = State()
    teamwork = State()

GOALS = {
    "1": "–í–µ–±-—Å–∞–π—Ç—ã / UI/UX",
    "2": "–õ–æ–≥–æ—Ç–∏–ø—ã / –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏",
    "3": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ / —Å–æ—Ü—Å–µ—Ç–∏",
    "4": "–§–æ—Ç–æ / –∫–æ–ª–ª–∞–∂–∏"
}

EXPERIENCE = {"1": "–ù–æ–≤–∏—á–æ–∫", "2": "–û–ø—ã—Ç–Ω—ã–π"}
PLATFORMS = {"1": "Windows", "2": "Mac", "3": "–û–Ω–ª–∞–π–Ω (–±—Ä–∞—É–∑–µ—Ä)"}
BUDGET = {"1": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "2": "–ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å"}
TEAMWORK = {"1": "–û–¥–∏–Ω", "2": "–í –∫–æ–º–∞–Ω–¥–µ"}

@dp.message_handler(commands=['start'])
async def start_quiz(message: types.Message):
    await DesignQuiz.goal.set()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for k, v in GOALS.items():
        kb.add(f"{k}. {v}")
    await message.answer("üé® –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞.\n\n"
                         "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å?", reply_markup=kb)

@dp.message_handler(state=DesignQuiz.goal)
async def process_goal(message: types.Message, state: FSMContext):
    key = message.text.split('.')[0] if '.' in message.text else None
    if key not in GOALS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(goal=key)
    await DesignQuiz.next()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for k, v in EXPERIENCE.items():
        kb.add(f"{k}. {v}")
    await message.answer("–¢–≤–æ–π –æ–ø—ã—Ç –≤ –¥–∏–∑–∞–π–Ω–µ?", reply_markup=kb)

@dp.message_handler(state=DesignQuiz.experience)
async def process_experience(message: types.Message, state: FSMContext):
    key = message.text.split('.')[0] if '.' in message.text else None
    if key not in EXPERIENCE:
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(experience=key)
    await DesignQuiz.next()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for k, v in PLATFORMS.items():
        kb.add(f"{k}. {v}")
    await message.answer("–ù–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=kb)

@dp.message_handler(state=DesignQuiz.platform)
async def process_platform(message: types.Message, state: FSMContext):
    key = message.text.split('.')[0] if '.' in message.text else None
    if key not in PLATFORMS:
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(platform=key)
    await DesignQuiz.next()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for k, v in BUDGET.items():
        kb.add(f"{k}. {v}")
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç?", reply_markup=kb)

@dp.message_handler(state=DesignQuiz.budget)
async def process_budget(message: types.Message, state: FSMContext):
    key = message.text.split('.')[0] if '.' in message.text else None
    if key not in BUDGET:
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(budget=key)
    await DesignQuiz.next()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for k, v in TEAMWORK.items():
        kb.add(f"{k}. {v}")
    await message.answer("–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –æ–¥–∏–Ω –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ?", reply_markup=kb)

@dp.message_handler(state=DesignQuiz.teamwork)
async def process_teamwork_and_recommend(message: types.Message, state: FSMContext):
    key = message.text.split('.')[0] if '.' in message.text else None
    if key not in TEAMWORK:
        await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(teamwork=key)
    data = await state.get_data()
    await state.finish()

    goal = data['goal']
    exp = data['experience']
    platform = data['platform']
    budget = data['budget']
    teamwork = data['teamwork']

    if goal == "3":
        recommendation = "üåü **Canva** ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ—â–Ω–∞—è, —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–Ω–ª–∞–π–Ω."
    elif goal == "1":
        if exp == "1":
            recommendation = "‚ú® **Figma** ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞, –æ–Ω–ª–∞–π–Ω, –æ—Ç–ª–∏—á–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–æ–≤–∏—á–∫–æ–≤. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∞–π—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
        else:
            recommendation = "üöÄ **Figma** –∏–ª–∏ **Adobe XD** ‚Äî Figma –ª—É—á—à–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, XD ‚Äî –µ—Å–ª–∏ —Ç—ã –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Adobe."
    elif goal == "2":
        if budget == "1":
            recommendation = "üñåÔ∏è **Inkscape** (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) –∏–ª–∏ **Vectr** ‚Äî —Ö–æ—Ä–æ—à–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏. –ù–æ –¥–ª—è –ø—Ä–æ—Ñ–∏ ‚Äî **Adobe Illustrator**."
        else:
            recommendation = "üñãÔ∏è **Adobe Illustrator** ‚Äî –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π."
    elif goal == "4":
        if budget == "1":
            recommendation = "üì∏ **Photopea** (–æ–Ω–ª–∞–π–Ω, –∫–∞–∫ Photoshop) –∏–ª–∏ **GIMP** ‚Äî –º–æ—â–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏."
        else:
            recommendation = "üñºÔ∏è **Adobe Photoshop** ‚Äî –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Ñ–æ—Ç–æ –∏ –∫–æ–ª–ª–∞–∂–µ–π."
    else:
        recommendation = "üõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π **Figma** ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á!"

    if teamwork == "2" and "Figma" not in recommendation:
        recommendation += "\n\nüí° –ù–æ –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø–æ–¥—É–º–∞–π –æ **Figma**: –æ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É!"

    if platform == "3":
        if "Figma" not in recommendation and "Canva" not in recommendation:
            recommendation += "\n\nüåê –¢–∞–∫ –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –æ–Ω–ª–∞–π–Ω, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ **Figma**, **Canva** –∏–ª–∏ **Photopea**."

    await message.answer(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n{recommendation}\n\n–£–¥–∞—á–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ! üé®",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer("–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ? –ù–∞–ø–∏—à–∏ /start")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)